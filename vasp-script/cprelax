#!/usr/bin/env python

INCAR = [
    '#Basic\n',
    '  PREC        = Normal    # PREC= Low | Medium | High | Normal | Accurate | Single\n',
    '  ISTART      = 0         # Determines whether to read WAVECAR or not.\n',
    "  ICHARG      = 2         # Determines the 'initial' charge density.\n",
    '  LREAL       = Auto      # .TRUE.:projection in real space, .FALSE.:reciprocal space.\n',
    '  LWAVE       = .FALSE.   # Written WAVECAR.\n',
    '  LCHARG      = .FALSE.   # Written CHG and CHGCAR.\n',
    '  LORBIT      = 11        # Written PROCAR and PROOUT.\n',
    '  NPAR        = 4         # number of cores per compute node. set:sqrt(number of cores)\n',
    ' #ISYM        = 0         # Default\n', 
    '\n', 
    '#Electronic Relaxation\n',
    '  ENCUT       = 500       # Cut-off energy for plane wave basis set in eV.\n',
    '  NELM        = 60        # Maximum number of electronic SC steps.\n',
    '  NELMIN      = 6         # Minimum number of electronic SC steps.\n',
    '  EDIFF       = 1E-5      # Break condition for the electronic SC-loop.\n',
    '  GGA         = PE        # GGA = 91 -- PE -- RP -- PS -- AM\n',
    ' #VOSKOWN     = 1         # For PW91 and is not required for thr PBE or PBEsol\n',
    '\n', 
    '#Ionic Relaxation\n',
    '  NSW         = 2000      # Maximum number of ionic steps.\n',
    '  EDIFFG      = -0.02     # Break condition for the ionic relaxation loop\n',
    '  IBRION      = 2         # Determines how the ions are updated and moved.\n',
    '  ISIF        = 2         # Controls whether the stress tensor is calculated.\n',
    '  POTIM       = 0.2       # Scaling constant for the forces.\n',
    ' #IVDW        = 11        # Add vdW correction to potential energy.\n',
    '\n', 
    '#DOS related values\n',
    '  ISMEAR      = 0         # Determines partial occupancies fnk for each orbital.\n',
    '  SIGMA       = 0.05\n',
    ' #NBANDS      = 112       # Determines the actual number of bands in the calculation.\n',
    '\n', 
    '#Magnetism\n', 
    ' #NUPDOWN     = 2         # Number of electrons\n',
    ' #SAXIS       =           # s_x s_y s_z (quantisation axis for spin)\n',
    ' #MAGMOM      =           # local magnetic moment in x,y,z\n', 
    '\n',
    '#Soc related values\n',
    ' #LSORBIT     = .TRUE.    # Switches on spin-orbit coupling.\n',
    ' #LNONCOLLINEAR = .TRUE.  # Perform fully non-collinear magnetic structure calculations.\n',
    ' #LMAXMIX     = 4         # Controls up to which l quantum number the onsite PAW charge densities.\n',
    ' #GGA_COMPAT  = .FALSE.   # Restores the full lattice symmetry for gradient corrected functionals.\n',
    '\n', 
    '#HSE06 related values\n',
    ' #LHFCALC     = .TRUE.    # Whether Hartree-Fock type calculations are performed.\n',
    ' #HFSCREEN    = 0.2       # Determines the range separation parameter in hybrid functionals.\n',
    ' #ALGO        = Damped    # Specify the electronic minimisation algorithm.\n',
    ' #TIME        = 0.4       # Controls the trial time step or the initial (steepest descent) phase.\n',
    ' #PRECFOCK    = Normal    # Controls the FFT grid for the exact exchange (Hartree-Fock) routines.\n',
    ' #AEXX        = 0.25      # Fraction of exact exchange.\n', 
    '\n',
    '#L(S)DA + U\n', 
    ' #LDAU        = .TRUE.\n', 
    ' #LDAUTYPE    = 2\n',
    ' #LDAUL       = \n', 
    ' #LDAUU       = \n', 
    ' #LDAUJ       = \n',
    ' #LDAUPRINT   = 2\n', 
    ' #LMAXMIX     = 6\n'
]
open("INCAR", "w").writelines(INCAR)

KPOINTS = [
    'Automatic mesh\n', 
    '0\n', 'Gamma\n', 
    '  6  6  1\n', 
    '  0  0  0\n'
]
open("KPOINTS", "w").writelines(KPOINTS)
