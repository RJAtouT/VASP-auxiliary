#!/usr/bin/env python
from os import system

CONFIG = [
    '[PRE]\n',     
    'MD_DIR = MD\n',
    'SCF_DIR = SCF\n', 
    'NAC_DIR = NAC\n', 
    'SNAPS_DIR = snaps\n',
    'SPECTRUM_DIR = spectrum\n', 
    'RES_DIR = OUT\n', 
    'MACRO_DiR = MACRO\n',
    '\n', 
    '[MD]\n',
    'NP = 16\n', 
    'VASP = vasp.std.5.4.1\n',
    '\n', 
    '[SCF]\n',
    'START = 0\n', 
    'END = 4000 \n',
    'DELTA = 1000\n', 
    'KPOINTS = 0\n', 
    'VASP = vasp.std.5.4.1\n',
    '# 0-norm 1-PBS 2-SLURM 3-LSF\n', 
    'do_submit = 3\n', 
    'minband = 142\n',
    'maxband = 183\n', 
    'nocc = 162\n', 
    '\n',
    '[NAMD]\n', 
    'Ham_re_prefix = 0_Ham_\n',
    'Ham_re_suffix = _re\n', 
    'Ham_im_prefix = 0_Ham_\n',
    'Ham_im_suffix = _im\n', 
    '\n',
    'namdtime = 1900\n', 
    '#sh_algo = 0\n', 
    'num_sh_traj = 5000\n',
    '#boltz_flag = 1\n', 
    '\n', 
    '#debug_flag = 1\n',
    'Temp = 300\n', 
    'nucl_dt = 1\n', 
    'elec_dt = 0.001\n', 
    '#integrator = 0\n',
    '\n', 
    'runtype = namd\n', 
    '#alp_bet = 0\n',
    'decoherence = 1\n', 
    '#regress_mode = 0\n', 
    'output_flag = true\n',
    'compress = false\n', 
    '\n', 
    'Nmin = 142\n',
    'Nmax = 183\n', 
    'ex_indx = 1 \n', 
    '\n',
    'iconds = 2000\n', 
    'diconds = 20\n', 
    '\n',
    'state_file = STATECAR\n', 
    '#shift_file = SHIFTCAR\n',
    '#Exc_file = EXCCAR\n', 
    '#nac_scale_file = NACCAR\n',
]
open("CONFIG.ini", "w").writelines(CONFIG)

submit = [
    '#!/bin/sh\n', 
    '#BSUB -J zyh\n', 
    '#BSUB -n 28 \n', 
    '#BSUB -q normal\n',
    '#BSUB -R "span[ptile=28]"\n', 
    '#BSUB -o %J.log\n',
    '#BSUB -m "c01n01 c01n02 c01n03 c01n04 c01n05 c01n06 c01n07 c01n08 c01n09 c01n10 c01n11 c01n12 c01n13 c01n14 c01n15 c01n16 c02n05 c02n06 c02n07 c02n08 c02n09 c02n10 c02n11 c02n12 c02n13 c02n14 c02n15 c02n16 c03n01 c03n02 c03n03 c03n04 c03n05 c03n06 c03n07 c03n08 c03n09 c03n10 c03n11 c03n12 c03n13 c03n14 c03n15 c03n16"\n',
    '\n', 
    "python -c '\n", 
    'from PYXAID import runMD1\n', 
    'params = {}\n',
    'params["BATCH_SYSTEM"] = "mpirun"\n', 
    'params["NP"] = \n',
    'params["EXE"] = \n', 
    'params["dt"] = 1.0\n',
    'params["pp_type"] = "PAW"\n', 
    'params["wd"] = "TEMP"\n',
    'params["rd"] = \n', 
    'params["minband"] = \n', 
    'params["maxband"] = \n',
    'params["compute_Hprime"] = 0\n', 
    'params["nocc"] = \n',
    'params["nac_method"] = 0\n', 
    'params["wfc_preprocess"] = "normalize"\n',
    'params["do_complete"] = 0\n', 
    'params["KPOINTS"] = \n',
    'params["start_indx"] = \n', 
    'params["stop_indx"] = \n',
    'runMD1.runMD(params)\n', 
    "'\n"
]
open("submit_scf", "w").writelines(submit)

INCAR = [
    '#Basic\n',
    '  PREC        = Normal    # PREC= Low | Medium | High | Normal | Accurate | Single\n',
    ' #ISTART      = 1         # Determines whether to read WAVECAR or not.\n',
    " #ICHARG      = 11        # Determines the 'initial' charge density.\n",
    '  LREAL       = Auto      # .TRUE.:projection in real space, .FALSE.:reciprocal space.\n',
    '  LWAVE       = .TRUE.    # Written WAVECAR.\n',
    '  LCHARG      = .TRUE.    # Written CHG and CHGCAR.\n',
    '  LORBIT      = 11        # Written PROCAR and PROOUT.\n',
    '  NPAR        = 4         # number of cores per compute node. set:sqrt(number of cores)\n',
    ' #ISYM        = 0         # Default\n', 
    '\n', 
    '#Electronic Relaxation\n',
    '  ENCUT       = 500       # Cut-off energy for plane wave basis set in eV.\n',
    '  NELM        = 60        # Maximum number of electronic SC steps.\n',
    '  NELMIN      = 6         # Minimum number of electronic SC steps.\n',
    '  EDIFF       = 1E-5      # Break condition for the electronic SC-loop.\n',
    '  GGA         = PE        # GGA = 91 -- PE -- RP -- PS -- AM\n',
    ' #VOSKOWN     = 1         # For PW91 and is not required for thr PBE or PBEsol\n',
    '\n', 
    '#Ionic Relaxation\n',
    ' #NSW         = 2000      # Maximum number of ionic steps.\n',
    ' #EDIFFG      = -0.02     # Break condition for the ionic relaxation loop\n',
    ' #IBRION      = 2         # Determines how the ions are updated and moved.\n',
    ' #ISIF        = 2         # Controls whether the stress tensor is calculated.\n',
    ' #POTIM       = 0.2       # Scaling constant for the forces.\n',
    ' #IVDW        = 11        # Add vdW correction to potential energy.\n',
    '\n', 
    '#DOS related values\n',
    '  ISMEAR      = 0         # Determines partial occupancies fnk for each orbital.\n',
    '  SIGMA       = 0.05\n',
    ' #NBANDS      = 112       # Determines the actual number of bands in the calculation.\n',
    '\n', 
    '#Magnetism\n', 
    ' #NUPDOWN     = 2         # Number of electrons\n',
    ' #SAXIS       =           # s_x s_y s_z (quantisation axis for spin)\n',
    ' #MAGMOM      =           # local magnetic moment in x,y,z\n', 
    '\n',
    '#Soc related values\n',
    ' #LSORBIT     = .TRUE.    # Switches on spin-orbit coupling.\n',
    ' #LNONCOLLINEAR = .TRUE.  # Perform fully non-collinear magnetic structure calculations.\n',
    ' #LMAXMIX     = 4         # Controls up to which l quantum number the onsite PAW charge densities.\n',
    ' #GGA_COMPAT  = .FALSE.   # Restores the full lattice symmetry for gradient corrected functionals.\n',
    '\n', 
    '#HSE06 related values\n',
    ' #LHFCALC     = .TRUE.    # Whether Hartree-Fock type calculations are performed.\n',
    ' #HFSCREEN    = 0.2       # Determines the range separation parameter in hybrid functionals.\n',
    ' #ALGO        = Damped    # Specify the electronic minimisation algorithm.\n',
    ' #TIME        = 0.4       # Controls the trial time step or the initial (steepest descent) phase.\n',
    ' #PRECFOCK    = Normal    # Controls the FFT grid for the exact exchange (Hartree-Fock) routines.\n',
    ' #AEXX        = 0.25      # Fraction of exact exchange.\n', 
    '\n',
    '#L(S)DA + U\n', 
    ' #LDAU        = .TRUE.\n', 
    ' #LDAUTYPE    = 2\n',
    ' #LDAUL       = \n', 
    ' #LDAUU       = \n', 
    ' #LDAUJ       = \n',
    ' #LDAUPRINT   = 2\n', 
    ' #LMAXMIX     = 6\n'
]
open("INCAR-SCF", "w").writelines(INCAR)

KPOINTS = [
    'Automatic mesh\n', 
    '0\n', 
    'Gamma\n', 
    '  1  1  1\n', 
    '  0  0  0\n'
]
open("KPOINTS-SCF", "w").writelines(KPOINTS)

system("cp ../scf/POTCAR POTCAR")
system("mkdir -p MD")
system("cp ../NVE/XDATCAR MD/.")
